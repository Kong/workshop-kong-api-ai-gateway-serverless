<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenID Connect :: API Management with Kong Konnect</title>
    <link>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/index.html</link>
    <description>For advanced and enterprise class requirements, OpenID Connect (OIDC) is the preferred option to implement API consumer Authentication. OIDC also provides mechanisms to implement Authorization. In fact, when applying OIDC to secure the APIs, we’re delegating the Authentication process to the external Identity Provider entity.&#xA;OpenID Connect is an authentication protocol built on top of OAuth 2.0 and JWT - JSON Web Token to add login and profile information about the identity who is logged in.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keycloak</title>
      <link>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1573-keycloak/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1573-keycloak/index.html</guid>
      <description>The two next topics describe Authorization Code OAuth and Client Credentials grants implemented by Kong Konnect and Keycloak as the Identity Provider. Let’s start installing Keycloak in our Kubernetes Cluster.&#xA;Keycloak Installation Run the following command to deploy Keycloak:&#xA;wget https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/refs/heads/main/kubernetes/keycloak.yaml yq &#39;select(.kind == &#34;Service&#34; and .metadata.name == &#34;keycloak&#34;) |= .spec.type = &#34;LoadBalancer&#34;&#39; -i keycloak.yaml yq &#39;select(.kind == &#34;StatefulSet&#34; and .metadata.name == &#34;keycloak&#34;) |= .spec.replicas = 1&#39; -i keycloak.yaml kubectl create namespace keycloak kubectl apply -n keycloak -f keycloak.yaml Keycloak “Realm” definition All our configuration will be done in a specific Keycloak Realm. Direct your browser to the Keycloak’s external IP address:</description>
    </item>
    <item>
      <title>Authorization Code</title>
      <link>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1574-oidc_authorizationcode/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1574-oidc_authorizationcode/index.html</guid>
      <description>This page describes a configuration of the Authorization Code Grant. Check the OpenID Connect plugin documentation to learn more about it.&#xA;Installing OpenID Connect Plugin All Keycloak settings are available for the OIDC plugin in the following address:&#xA;curl http://localhost:8080/realms/kong/.well-known/openid-configuration | jq The most important ones are the endpoints necessary to implement the Grant:&#xA;cat &gt; oidc.yaml &lt;&lt; &#39;EOF&#39; _format_version: &#34;3.0&#34; _konnect: control_plane_name: kong-workshop _info: select_tags: - httpbin-service-route services: - name: httpbin-service host: httpbin.kong.svc.cluster.local port: 8000 routes: - name: oidc-route paths: - /oidc-route plugins: - name: openid-connect instance_name: openid-connect1 config: auth_methods: [&#34;authorization_code&#34;] redirect_uri: - http://localhost/oidc-route/get client_id: [&#34;kong_id&#34;] client_secret: [&#34;RVXO9SOJskjw4LeVupjRbIMJIAyyil8j&#34;] issuer: http://127.0.0.1:8080/realms/kong authorization_endpoint: http://127.0.0.1:8080/realms/kong/protocol/openid-connect/auth token_endpoint: http://keycloak.keycloak:8080/realms/kong/protocol/openid-connect/token extra_jwks_uris: [&#34;http://keycloak.keycloak.svc.cluster.local:8080/realms/kong/protocol/openid-connect/certs&#34;] consumer_optional: false consumer_claim: [&#34;preferred_username&#34;] consumer_by: [&#34;username&#34;] consumers: - username: consumer1 EOF An important observation here is that we have the OpenId Connect plugin configured with the Kong Consumer mapping. The consumer_claim setting specifies that the plugin will take the preferred_username field from the Access Token to map it to some Kong Consumer. The Kong Consumer chosen is the one that has the same preferred_username as its username. The declaration above configures the OIDC plugin as well as creates the necessary consumer. Later on you can apply plugin to the Kong Consumer to define specific policies.</description>
    </item>
    <item>
      <title>Client Credentials</title>
      <link>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1575-oidc_clientcredentials/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1575-oidc_clientcredentials/index.html</guid>
      <description>This page describes a configuration of the Client Credentials Grant. Check the OpenID Connect plugin documentation to learn more about it.&#xA;The main use case for the OAuth Client Credentials Grant is to address application authentication rather than user authentication. In such a scenario, authentication processes based on userid and password are not feasible. Instead, applications should deal with Client IDs and Client Secrets to authenticate and get a token.&#xA;Installing OpenID Connect Plugin cat &gt; oidc.yaml &lt;&lt; &#39;EOF&#39; _format_version: &#34;3.0&#34; _konnect: control_plane_name: kong-workshop _info: select_tags: - httpbin-service-route services: - name: httpbin-service host: httpbin.kong.svc.cluster.local port: 8000 routes: - name: oidc-route paths: - /oidc-route plugins: - name: openid-connect instance_name: openid-connect1 config: auth_methods: [&#34;client_credentials&#34;] issuer: http://keycloak.keycloak:8080/realms/kong token_endpoint: http://keycloak.keycloak:8080/realms/kong/protocol/openid-connect/token extra_jwks_uris: [&#34;http://keycloak.keycloak.svc.cluster.local:8080/realms/kong/protocol/openid-connect/certs&#34;] consumer_optional: false consumer_claim: [&#34;client_id&#34;] consumer_by: [&#34;username&#34;] consumers: - username: kong_id EOF Note that we are going to map the Access Token to the Kong Consumer based on the client_id now.</description>
    </item>
    <item>
      <title>Authorization</title>
      <link>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1576-oidc_accesscontrol/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/12-api-gateway/15-use-cases/157-openidconnect/1576-oidc_accesscontrol/index.html</guid>
      <description>So far, we have used the OpenID Connect plugin to implement Authentication processes only.&#xA;The aud (Audience) claim comes from the JWT specification in [RFC 7519]. It allows the receiving party to verify whether a given JWT was intended for them. Per the specification, the aud value can be a single string or an array of strings. aud - Identifies the audience (resource URI or server) that this access token is intended for.</description>
    </item>
  </channel>
</rss>