<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API Management with Kong Konnect and Serverless API Gateway</title>
    <link>http://localhost:1313/index.html</link>
    <description>Introduction Kong Konnect is an API lifecycle management platform delivered as a service. The management plane is hosted in the cloud by Kong. The management plane enables customers to securely execute API management activities such as create API routes, define services etc. Runtime environments connect with the management plane using mutual transport layer authentication (mTLS), receive the updates and take customer facing API traffic.&#xA;The runtime environments can be:&#xA;Self-managed and deployed in your personal environment Managed by Kong in two options: Dedicated Cloud Gateway: it runs on isolated infrastructure within Kong-managed environments in AWS, Azure, or GCP offering the performance and security of dedicated infrastructure with the operational ease of SaaS. Serverless Gateway: it is a lightweight API gateways, ideal for developers who want to test or experiment in a pre-production environment. Learning Objectives In this workshop, you will:</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prerequisites</title>
      <link>http://localhost:1313/10-prerequisites/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/10-prerequisites/index.html</guid>
      <description>Knowledge Attendees should have basic knowledge of containers and other products like Keycloak, Redis, Prometheus etc.&#xA;Attendees should have basic knowledge of GenAI models, specially LLMs and Embedding models as well as providers like OpenAI, Mistral, Anthropic, AWS, GCP, Azure.&#xA;Kong Academy Complete two badges via Kong Academy: Kong Gateway Foundations and Kong Gateway Operations&#xA;Kong Konnect Subscription You will need a Kong Konnect Subscription to execute this workshop.&#xA;Environment Please, make sure you have decK installed in your local environment.</description>
    </item>
    <item>
      <title>Kong Konnect Architectural Overview</title>
      <link>http://localhost:1313/architecture/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/architecture/index.html</guid>
      <description>The Kong Konnect platform provides a cloud control plane (CP), which manages all service configurations. It propagates those configurations to all Runtime control planes, which use in-memory storage. These nodes can be installed anywhere, on-premise or in AWS.&#xA;For today workshop, we will be focusing on Kong Gateway. Kong Gateway data plane listen for traffic on the proxy port 443 by default. The data plane evaluates incoming client API requests and routes them to the appropriate backend APIs. While routing requests and providing responses, policies can be applied with plugins as necessary.</description>
    </item>
    <item>
      <title>Konnect Setup</title>
      <link>http://localhost:1313/11-konnect-setup/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/11-konnect-setup/index.html</guid>
      <description>This chapter will walk you through&#xA;Konnect Control Plane and Data Plane creation. Access Kong Data Plane. Here’s a Reference Architecture that will be implemented in this workshop:&#xA;Kong Konnect Control Plane: responsible for managing your APIs Kong Konnect Data Plane: connected to the Control Plane, it is responsible for processing all the incoming requests sent by the consumers. Kong provides a plugin framework, where each one of them is responsible for a specific functionality. As a can see, there are two main collections of plugins: On the left, the historic and regular API Gateway plugins, implementing all sort of policies including, for example, OIDC based Authentication processes with Keycloak, Amazon Cognito and Okta or Observability with Prometheus/Grafana and Dynatrace. On the right, another plugin collection for AI-based use cases. For example, the AI Rate Limiting plugin implements policies like this based on the number of tokens consumed be the requests. Or, as another example is the AI Semantic Cache plugin, which caches data based on the semantics related to the responses coming from the LLM models. Kong AI Gateway supports, out of the box, a variety of infrastructures, including not just OpenAI, but also Amazon Bedrock, Google Gemini, Mistral, Anthropic, etc. In order to deal with embeddings, the Gateway also supports also vector databases. Kong Gateway protects not just the LLM Models but also the upstream services, including your application micros surfaces or services. Konnect Control Plane After Konnect registration, you need to create your first Control Plane. There are multiple ways to do it:</description>
    </item>
    <item>
      <title>Kong API Gateway</title>
      <link>http://localhost:1313/12-api-gateway/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/12-api-gateway/index.html</guid>
      <description>With our Control Plane created and Data Plane layer deployed it’s time to create an API and expose an application. In this module, we will:&#xA;Use decK to define a Kong Service based on an endpoint provided by the application and a Kong Route on top of the Kong Service to expose the application. Enable Kong Plugins to the Kong Route or Kong Service. Define Kong Consumers to represent the entities sending request to the Gateway and enable Kong Plugin to them. With decK (declarations for Kong) you can manage Kong Konnect configuration in a declaratively way.</description>
    </item>
    <item>
      <title>APIOps and decK</title>
      <link>http://localhost:1313/14-apiops-deck/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/14-apiops-deck/index.html</guid>
      <description>Back to Module 05 README&#xA;Interactive Activities Concept APIOps applies DevOps principles (automation, version control, CI/CD) to API lifecycle management.&#xA;With Kong Konnect and decK, APIs can be treated as code — versioned, tested, and deployed through pipelines.&#xA;Exercise Clone/Open your lab repo where specs and configs are stored.&#xA;Review the Bash script below. It demonstrates:&#xA;Converting an OpenAPI spec into Kong configuration (openapi2kong) Tagging routes for traceability Merging platform defaults, plugins, and upstreams Syncing the configuration with Konnect #!/bin/sh set -e INPUT_SPEC=&#34;./spec/kong-air-apis.yaml&#34; OUTPUT_SPEC=&#34;./decks/kong.yaml&#34; echo &#34;Step 1: Convert OpenAPI → Kong decK format&#34; deck file openapi2kong --spec &#34;$INPUT_SPEC&#34; -o &#34;$OUTPUT_SPEC&#34; echo &#34;Step 2: Add tags&#34; deck file add-tags kong-konnect-bootcamp -s &#34;$OUTPUT_SPEC&#34; -o &#34;$OUTPUT_SPEC&#34; echo &#34;Step 3: Merge platform configs&#34; deck file merge &#34;$OUTPUT_SPEC&#34; ./platform/*.yaml -o &#34;$OUTPUT_SPEC&#34; echo &#34;Step 4: Sync with Konnect&#34; deck gateway sync &#34;$OUTPUT_SPEC&#34; \ --konnect-addr &#34;https://eu.api.konghq.com&#34; \ --konnect-control-plane-name &#34;bootcamp-2025&#34; \ --konnect-token &#34;$DECK_KONNECT_TOKEN&#34; \ --select-tag kong-konnect-bootcamp Refer to ./scripts/apiops.sh for the full Bash script. Run the script locally to simulate a pipeline execution.</description>
    </item>
    <item>
      <title>Konnect Developer Portal</title>
      <link>http://localhost:1313/15-developer-portal/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/15-developer-portal/index.html</guid>
      <description>1. Create a Dev Portal Navigate to Konnect and go to Dev Portal. Click Create Dev Portal and fill in the required details (name, authentication settings, visibility, etc.). Save and note your Dev Portal URL. 2. Publish an API to the Dev Portal Go to Dev Portal &gt; APIs. Click New API and provide the API name, version, and upload an OpenAPI spec or Markdown documentation. (Optional) Link the API to a Gateway Service to enable developer self-service and authentication. Publish the API to your Dev Portal and select an authentication strategy if required. ℹ️ You must have the Product Publisher role to publish APIs to the portal.</description>
    </item>
    <item>
      <title>Kong AI Gateway</title>
      <link>http://localhost:1313/16-ai-gateway/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/16-ai-gateway/index.html</guid>
      <description>In this second part of the workshop we are going to explore the AI capabilities provides by Kong AI Gateway and the specific collection of plugins.&#xA;You can now click Next to begin the module.&#xA;Optional Reading Learn more about Kong AI Gateway</description>
    </item>
    <item>
      <title>Konnect Builtin Observability</title>
      <link>http://localhost:1313/20-observability/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/20-observability/index.html</guid>
      <description>Basically Konnect provides two main Builtin Observability services:&#xA;Konnect Advanced Analytics: it is a real-time, contextual analytics platform that provides insights into API health, performance, and usage.&#xA;Konnect Debugger: it provides a connected debugging experience and real-time trace-level visibility into API traffic.</description>
    </item>
  </channel>
</rss>